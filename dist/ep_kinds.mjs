const ep_proto$1 = Object.create(Object.getPrototypeOf(function () {}));
function add_ep_kind(kinds) {
  Object.assign(ep_proto$1, kinds);
}

add_ep_kind({
  clientEndpoint(api) {
    const target = clientEndpoint(api);
    this.endpoint(target);
    return target.done;
  },

  client(...args) {
    if (1 === args.length && 'function' === typeof args[0]) {
      return this.clientEndpoint(args[0]);
    }

    const msg_ctx = new this.MsgCtx();
    return 0 !== args.length ? msg_ctx.to(...args) : msg_ctx;
  } });

const ep_client_api = {
  async on_ready(ep, hub) {
    this._resolve((await this.on_client_ready(ep, hub)));
    await ep.shutdown();
  },
  on_send_error(ep, err) {
    this._reject(err);
  },
  on_shutdown(ep, err) {
    err ? this._reject(err) : this._resolve();
  } };

function clientEndpoint(on_client_ready) {
  let target = Object.create(ep_client_api);
  target.on_client_ready = on_client_ready;
  target.done = new Promise((resolve, reject) => {
    target._resolve = resolve;
    target._reject = reject;
  });
  return target;
}

add_ep_kind({
  api(api) {
    return this.endpoint(api_endpoints.parallel(api));
  },
  api_parallel(api) {
    return this.endpoint(api_endpoints.parallel(api));
  },
  api_inorder(api) {
    return this.endpoint(api_endpoints.inorder(api));
  } });

const api_endpoints = {
  parallel(api) {
    return function (ep, hub) {
      const rpc = api_endpoints.bind_rpc(api, ep, hub);
      return { rpc,
        async on_msg({ msg, sender }) {
          await rpc.invoke(sender, msg.op, api_fn => api_fn(msg.kw, msg.ctx));
        } };
    };
  },

  inorder(api) {
    return function (ep, hub) {
      const rpc = api_endpoints.bind_rpc(api, ep, hub);
      return { rpc,
        async on_msg({ msg, sender }) {
          await rpc.invoke_gated(sender, msg.op, api_fn => api_fn(msg.kw, msg.ctx));
        } };
    };
  },

  bind_rpc(api, ep, hub) {
    const pfx = api.op_prefix || 'rpc_';
    const lookup_op = api.op_lookup ? op => api.op_lookup(pfx + op, ep, hub) : 'function' === typeof api ? op => api(pfx + op, ep, hub) : op => {
      const fn = api[pfx + op];
      return fn ? fn.bind(api) : fn;
    };

    return Object.create(rpc_api, {
      lookup_op: { value: lookup_op },
      err_from: { value: ep.ep_self() } });
  } };

const rpc_api = {
  async invoke(sender, op, cb) {
    const api_fn = await this.resolve_op(sender, op);
    if (undefined === api_fn) {
      return;
    }

    const res = this.answer(sender, api_fn, cb);
    return await res;
  },

  async invoke_gated(sender, op, cb) {
    const api_fn = await this.resolve_op(sender, op);
    if (undefined === api_fn) {
      return;
    }

    const res = Promise.resolve(this.gate).then(() => this.answer(sender, api_fn, cb));
    this.gate = res.then(noop, noop);
    return await res;
  },

  async resolve_op(sender, op) {
    if ('string' !== typeof op) {
      await sender.send({ op, err_from: this.err_from,
        error: { message: 'Invalid operation', code: 400 } });
      return;
    }

    try {
      const api_fn = await this.lookup_op(op);
      if (!api_fn) {
        await sender.send({ op, err_from: this.err_from,
          error: { message: 'Unknown operation', code: 404 } });
      }
      return api_fn;
    } catch (err) {
      await sender.send({ op, err_from: this.err_from,
        error: { message: `Invalid operation: ${err.message}`, code: 500 } });
    }
  },

  async answer(sender, api_fn, cb) {
    try {
      var answer = cb ? await cb(api_fn) : await api_fn();
    } catch (err) {
      await sender.send({ err_from: this.err_from, error: err });
      return false;
    }

    if (sender.replyExpected) {
      await sender.send({ answer });
    }
    return true;
  } };

function noop() {}

add_ep_kind({
  server(on_init) {
    return this.endpoint(on_init);
  } });

export { clientEndpoint, api_endpoints };
export default ep_proto$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXBfa2luZHMubWpzIiwic291cmNlcyI6WyIuLi9jb2RlL2VwX2tpbmRzL2V4dGVuc2lvbnMuanN5IiwiLi4vY29kZS9lcF9raW5kcy9jbGllbnQuanN5IiwiLi4vY29kZS9lcF9raW5kcy9hcGkuanN5IiwiLi4vY29kZS9lcF9raW5kcy9pbmRleC5qc3kiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVwX3Byb3RvID0gT2JqZWN0LmNyZWF0ZSBAIE9iamVjdC5nZXRQcm90b3R5cGVPZiBAIGZ1bmN0aW9uKCl7fVxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9lcF9raW5kKGtpbmRzKSA6OlxuICBPYmplY3QuYXNzaWduIEAgZXBfcHJvdG8sIGtpbmRzXG5leHBvcnQgZGVmYXVsdCBhZGRfZXBfa2luZFxuIiwiaW1wb3J0IGFkZF9lcF9raW5kIGZyb20gJy4vZXh0ZW5zaW9ucy5qc3knXG5cbmFkZF9lcF9raW5kIEA6XG4gIGNsaWVudEVuZHBvaW50KGFwaSkgOjpcbiAgICBjb25zdCB0YXJnZXQgPSBjbGllbnRFbmRwb2ludChhcGkpXG4gICAgdGhpcy5lbmRwb2ludCBAIHRhcmdldFxuICAgIHJldHVybiB0YXJnZXQuZG9uZVxuXG4gIGNsaWVudCguLi5hcmdzKSA6OlxuICAgIGlmIDEgPT09IGFyZ3MubGVuZ3RoICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBhcmdzWzBdIDo6XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnRFbmRwb2ludCBAIGFyZ3NbMF1cblxuICAgIGNvbnN0IG1zZ19jdHggPSBuZXcgdGhpcy5Nc2dDdHgoKVxuICAgIHJldHVybiAwICE9PSBhcmdzLmxlbmd0aCA/IG1zZ19jdHgudG8oLi4uYXJncykgOiBtc2dfY3R4XG5cblxuY29uc3QgZXBfY2xpZW50X2FwaSA9IEB7fVxuICBhc3luYyBvbl9yZWFkeShlcCwgaHViKSA6OlxuICAgIHRoaXMuX3Jlc29sdmUgQCBhd2FpdCB0aGlzLm9uX2NsaWVudF9yZWFkeShlcCwgaHViKVxuICAgIGF3YWl0IGVwLnNodXRkb3duKClcbiAgb25fc2VuZF9lcnJvcihlcCwgZXJyKSA6OlxuICAgIHRoaXMuX3JlamVjdChlcnIpXG4gIG9uX3NodXRkb3duKGVwLCBlcnIpIDo6XG4gICAgZXJyID8gdGhpcy5fcmVqZWN0KGVycikgOiB0aGlzLl9yZXNvbHZlKClcblxuZXhwb3J0IGZ1bmN0aW9uIGNsaWVudEVuZHBvaW50KG9uX2NsaWVudF9yZWFkeSkgOjpcbiAgbGV0IHRhcmdldCA9IE9iamVjdC5jcmVhdGUgQCBlcF9jbGllbnRfYXBpXG4gIHRhcmdldC5vbl9jbGllbnRfcmVhZHkgPSBvbl9jbGllbnRfcmVhZHlcbiAgdGFyZ2V0LmRvbmUgPSBuZXcgUHJvbWlzZSBAIChyZXNvbHZlLCByZWplY3QpID0+IDo6XG4gICAgdGFyZ2V0Ll9yZXNvbHZlID0gcmVzb2x2ZVxuICAgIHRhcmdldC5fcmVqZWN0ID0gcmVqZWN0XG4gIHJldHVybiB0YXJnZXRcbiIsImltcG9ydCBhZGRfZXBfa2luZCBmcm9tICcuL2V4dGVuc2lvbnMuanN5J1xuXG5hZGRfZXBfa2luZCBAOlxuICBhcGkoYXBpKSA6OiByZXR1cm4gdGhpcy5lbmRwb2ludCBAIGFwaV9lbmRwb2ludHMucGFyYWxsZWwoYXBpKVxuICBhcGlfcGFyYWxsZWwoYXBpKSA6OiByZXR1cm4gdGhpcy5lbmRwb2ludCBAIGFwaV9lbmRwb2ludHMucGFyYWxsZWwoYXBpKVxuICBhcGlfaW5vcmRlcihhcGkpIDo6IHJldHVybiB0aGlzLmVuZHBvaW50IEAgYXBpX2VuZHBvaW50cy5pbm9yZGVyKGFwaSlcblxuXG5leHBvcnQgY29uc3QgYXBpX2VuZHBvaW50cyA9IEB7fVxuICBwYXJhbGxlbChhcGkpIDo6XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcCwgaHViKSA6OlxuICAgICAgY29uc3QgcnBjID0gYXBpX2VuZHBvaW50cy5iaW5kX3JwYyhhcGksIGVwLCBodWIpXG4gICAgICByZXR1cm4gQHt9IHJwYyxcbiAgICAgICAgYXN5bmMgb25fbXNnKHttc2csIHNlbmRlcn0pIDo6XG4gICAgICAgICAgYXdhaXQgcnBjLmludm9rZSBAIHNlbmRlciwgbXNnLm9wLFxuICAgICAgICAgICAgYXBpX2ZuID0+IGFwaV9mbihtc2cua3csIG1zZy5jdHgpXG5cbiAgaW5vcmRlcihhcGkpIDo6XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcCwgaHViKSA6OlxuICAgICAgY29uc3QgcnBjID0gYXBpX2VuZHBvaW50cy5iaW5kX3JwYyhhcGksIGVwLCBodWIpXG4gICAgICByZXR1cm4gQHt9IHJwYyxcbiAgICAgICAgYXN5bmMgb25fbXNnKHttc2csIHNlbmRlcn0pIDo6XG4gICAgICAgICAgYXdhaXQgcnBjLmludm9rZV9nYXRlZCBAIHNlbmRlciwgbXNnLm9wLFxuICAgICAgICAgICAgYXBpX2ZuID0+IGFwaV9mbihtc2cua3csIG1zZy5jdHgpXG5cbiAgYmluZF9ycGMoYXBpLCBlcCwgaHViKSA6OlxuICAgIGNvbnN0IHBmeCA9IGFwaS5vcF9wcmVmaXggfHwgJ3JwY18nXG4gICAgY29uc3QgbG9va3VwX29wID0gYXBpLm9wX2xvb2t1cFxuICAgICAgPyBvcCA9PiBhcGkub3BfbG9va3VwKHBmeCArIG9wLCBlcCwgaHViKVxuICAgICAgOiAnZnVuY3Rpb24nID09PSB0eXBlb2YgYXBpXG4gICAgICA/IG9wID0+IGFwaShwZnggKyBvcCwgZXAsIGh1YilcbiAgICAgIDogb3AgPT4gOjpcbiAgICAgICAgICBjb25zdCBmbiA9IGFwaVtwZnggKyBvcF1cbiAgICAgICAgICByZXR1cm4gZm4gPyBmbi5iaW5kKGFwaSkgOiBmblxuXG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUgQCBycGNfYXBpLCBAe31cbiAgICAgIGxvb2t1cF9vcDogQHt9IHZhbHVlOiBsb29rdXBfb3BcbiAgICAgIGVycl9mcm9tOiBAe30gdmFsdWU6IGVwLmVwX3NlbGYoKVxuXG5cbmNvbnN0IHJwY19hcGkgPSBAOlxuICBhc3luYyBpbnZva2Uoc2VuZGVyLCBvcCwgY2IpIDo6XG4gICAgY29uc3QgYXBpX2ZuID0gYXdhaXQgdGhpcy5yZXNvbHZlX29wIEAgc2VuZGVyLCBvcFxuICAgIGlmIHVuZGVmaW5lZCA9PT0gYXBpX2ZuIDo6IHJldHVyblxuXG4gICAgY29uc3QgcmVzID0gdGhpcy5hbnN3ZXIgQCBzZW5kZXIsIGFwaV9mbiwgY2JcbiAgICByZXR1cm4gYXdhaXQgcmVzXG5cbiAgYXN5bmMgaW52b2tlX2dhdGVkKHNlbmRlciwgb3AsIGNiKSA6OlxuICAgIGNvbnN0IGFwaV9mbiA9IGF3YWl0IHRoaXMucmVzb2x2ZV9vcCBAIHNlbmRlciwgb3BcbiAgICBpZiB1bmRlZmluZWQgPT09IGFwaV9mbiA6OiByZXR1cm5cblxuICAgIGNvbnN0IHJlcyA9IFByb21pc2UucmVzb2x2ZSh0aGlzLmdhdGUpXG4gICAgICAudGhlbiBAICgpID0+IHRoaXMuYW5zd2VyIEAgc2VuZGVyLCBhcGlfZm4sIGNiXG4gICAgdGhpcy5nYXRlID0gcmVzLnRoZW4obm9vcCwgbm9vcClcbiAgICByZXR1cm4gYXdhaXQgcmVzXG5cbiAgYXN5bmMgcmVzb2x2ZV9vcChzZW5kZXIsIG9wKSA6OlxuICAgIGlmICdzdHJpbmcnICE9PSB0eXBlb2Ygb3AgOjpcbiAgICAgIGF3YWl0IHNlbmRlci5zZW5kIEA6IG9wLCBlcnJfZnJvbTogdGhpcy5lcnJfZnJvbVxuICAgICAgICBlcnJvcjogQHt9IG1lc3NhZ2U6ICdJbnZhbGlkIG9wZXJhdGlvbicsIGNvZGU6IDQwMFxuICAgICAgcmV0dXJuXG5cbiAgICB0cnkgOjpcbiAgICAgIGNvbnN0IGFwaV9mbiA9IGF3YWl0IHRoaXMubG9va3VwX29wKG9wKVxuICAgICAgaWYgISBhcGlfZm4gOjpcbiAgICAgICAgYXdhaXQgc2VuZGVyLnNlbmQgQDogb3AsIGVycl9mcm9tOiB0aGlzLmVycl9mcm9tXG4gICAgICAgICAgZXJyb3I6IEB7fSBtZXNzYWdlOiAnVW5rbm93biBvcGVyYXRpb24nLCBjb2RlOiA0MDRcbiAgICAgIHJldHVybiBhcGlfZm5cbiAgICBjYXRjaCBlcnIgOjpcbiAgICAgIGF3YWl0IHNlbmRlci5zZW5kIEA6IG9wLCBlcnJfZnJvbTogdGhpcy5lcnJfZnJvbVxuICAgICAgICBlcnJvcjogQHt9IG1lc3NhZ2U6IGBJbnZhbGlkIG9wZXJhdGlvbjogJHtlcnIubWVzc2FnZX1gLCBjb2RlOiA1MDBcblxuICBhc3luYyBhbnN3ZXIoc2VuZGVyLCBhcGlfZm4sIGNiKSA6OlxuICAgIHRyeSA6OlxuICAgICAgdmFyIGFuc3dlciA9IGNiID8gYXdhaXQgY2IoYXBpX2ZuKSA6IGF3YWl0IGFwaV9mbigpXG4gICAgY2F0Y2ggZXJyIDo6XG4gICAgICBhd2FpdCBzZW5kZXIuc2VuZCBAOiBlcnJfZnJvbTogdGhpcy5lcnJfZnJvbSwgZXJyb3I6IGVyclxuICAgICAgcmV0dXJuIGZhbHNlXG5cbiAgICBpZiBzZW5kZXIucmVwbHlFeHBlY3RlZCA6OlxuICAgICAgYXdhaXQgc2VuZGVyLnNlbmQgQDogYW5zd2VyXG4gICAgcmV0dXJuIHRydWVcblxuXG5mdW5jdGlvbiBub29wKCkge31cblxuIiwiaW1wb3J0IHthZGRfZXBfa2luZCwgZXBfcHJvdG99IGZyb20gJy4vZXh0ZW5zaW9ucy5qc3knXG5cbmFkZF9lcF9raW5kIEA6XG4gIHNlcnZlcihvbl9pbml0KSA6OiByZXR1cm4gdGhpcy5lbmRwb2ludCBAIG9uX2luaXRcblxuZXhwb3J0ICogZnJvbSAnLi9jbGllbnQuanN5J1xuZXhwb3J0ICogZnJvbSAnLi9hcGkuanN5J1xuXG5leHBvcnQgZGVmYXVsdCBlcF9wcm90b1xuIl0sIm5hbWVzIjpbImVwX3Byb3RvIiwiT2JqZWN0IiwiY3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJhZGRfZXBfa2luZCIsImtpbmRzIiwiYXNzaWduIiwiYXBpIiwidGFyZ2V0IiwiY2xpZW50RW5kcG9pbnQiLCJlbmRwb2ludCIsImRvbmUiLCJhcmdzIiwibGVuZ3RoIiwibXNnX2N0eCIsIk1zZ0N0eCIsInRvIiwiZXBfY2xpZW50X2FwaSIsIm9uX3JlYWR5IiwiZXAiLCJodWIiLCJfcmVzb2x2ZSIsIm9uX2NsaWVudF9yZWFkeSIsInNodXRkb3duIiwiZXJyIiwiX3JlamVjdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYXBpX2VuZHBvaW50cyIsInBhcmFsbGVsIiwiaW5vcmRlciIsInJwYyIsImJpbmRfcnBjIiwib25fbXNnIiwibXNnIiwic2VuZGVyIiwiaW52b2tlIiwib3AiLCJhcGlfZm4iLCJrdyIsImN0eCIsImludm9rZV9nYXRlZCIsInBmeCIsIm9wX3ByZWZpeCIsImxvb2t1cF9vcCIsIm9wX2xvb2t1cCIsImZuIiwiYmluZCIsInJwY19hcGkiLCJ2YWx1ZSIsImVwX3NlbGYiLCJjYiIsInJlc29sdmVfb3AiLCJ1bmRlZmluZWQiLCJyZXMiLCJhbnN3ZXIiLCJnYXRlIiwidGhlbiIsIm5vb3AiLCJzZW5kIiwiZXJyX2Zyb20iLCJtZXNzYWdlIiwiY29kZSIsImVycm9yIiwicmVwbHlFeHBlY3RlZCIsIm9uX2luaXQiXSwibWFwcGluZ3MiOiJBQUFPLE1BQU1BLGFBQVdDLE9BQU9DLE1BQVAsQ0FBZ0JELE9BQU9FLGNBQVAsQ0FBd0IsWUFBVSxFQUFsQyxDQUFoQixDQUFqQjtBQUNQLEFBQU8sU0FBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7U0FDMUJDLE1BQVAsQ0FBZ0JOLFVBQWhCLEVBQTBCSyxLQUExQjs7O0FDQUZELFlBQWM7aUJBQ0dHLEdBQWYsRUFBb0I7VUFDWkMsU0FBU0MsZUFBZUYsR0FBZixDQUFmO1NBQ0tHLFFBQUwsQ0FBZ0JGLE1BQWhCO1dBQ09BLE9BQU9HLElBQWQ7R0FKVTs7U0FNTCxHQUFHQyxJQUFWLEVBQWdCO1FBQ1gsTUFBTUEsS0FBS0MsTUFBWCxJQUFxQixlQUFlLE9BQU9ELEtBQUssQ0FBTCxDQUE5QyxFQUF3RDthQUMvQyxLQUFLSCxjQUFMLENBQXNCRyxLQUFLLENBQUwsQ0FBdEIsQ0FBUDs7O1VBRUlFLFVBQVUsSUFBSSxLQUFLQyxNQUFULEVBQWhCO1dBQ08sTUFBTUgsS0FBS0MsTUFBWCxHQUFvQkMsUUFBUUUsRUFBUixDQUFXLEdB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
