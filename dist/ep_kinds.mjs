const ep_proto$1 = Object.create(Object.getPrototypeOf(function () {}));
function add_ep_kind(kinds) {
  Object.assign(ep_proto$1, kinds);
}

add_ep_kind({
  clientEndpoint(api) {
    const target = clientEndpoint(api);
    this.endpoint(target);
    return target.done;
  },

  client(...args) {
    if (1 === args.length && 'function' === typeof args[0]) {
      return this.clientEndpoint(args[0]);
    }

    const msg_ctx = new this.MsgCtx();
    return 0 !== args.length ? msg_ctx.to(...args) : msg_ctx;
  } });

const ep_client_api = {
  async on_ready(ep, hub) {
    this._resolve((await this.on_client_ready(ep, hub)));
    await ep.shutdown();
  },
  on_send_error(ep, err) {
    this._reject(err);
  },
  on_shutdown(ep, err) {
    err ? this._reject(err) : this._resolve();
  } };

function clientEndpoint(on_client_ready) {
  let target = Object.create(ep_client_api);
  target.on_client_ready = on_client_ready;
  target.done = new Promise((resolve, reject) => {
    target._resolve = resolve;
    target._reject = reject;
  });
  return target;
}

add_ep_kind({
  api(api) {
    return this.endpoint(asAPIEndpoint(api));
  } });

function asAPIEndpoint(api) {
  return (ep, hub) => {
    const invoke = as_rpc(api, ep, hub);
    return on_msg;

    async function on_msg({ msg, sender }) {
      await invoke(msg, sender);
    }
  };
}

function as_rpc(api, ep, hub) {
  const api_for_op = 'function' === typeof api ? op => api(op, ep, hub) : op => api[op];

  return Object.assign(invoke, {
    invoke, resolve_fn, invoke_fn, api_for_op });

  async function invoke(msg, sender) {
    const { op, kw } = msg;
    const fn = await resolve_fn(op, sender);
    if (undefined !== fn) {
      await invoke_fn(op, sender, () => fn(kw));
    }
  }

  async function resolve_fn(op, sender) {
    if ('string' !== typeof op || !op[0].match(/[A-Za-z]/)) {
      await sender.send({ op, err_from: ep,
        error: { message: 'Invalid operation', code: 400 } });
    }

    try {
      const fn = await api_for_op(op);
      if (!fn) {
        await sender.send({ op, err_from: ep,
          error: { message: 'Unknown operation', code: 404 } });
      }
      return fn;
    } catch (err) {
      await sender.send({ op, err_from: ep,
        error: { message: `Invalid operation: ${err.message}`, code: 500 } });
    }
  }

  async function invoke_fn(op, sender, cb) {
    try {
      var answer = await cb();
    } catch (err) {
      await sender.send({ op, err_from: ep, error: err });
      return false;
    }

    if (sender.replyExpected) {
      await sender.send({ op, answer });
    }
    return true;
  }
}

add_ep_kind({
  server(on_init) {
    return this.endpoint(on_init);
  } });

export { clientEndpoint, asAPIEndpoint, as_rpc };
export default ep_proto$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
