export default class Sink ::
  static forProtocols({inbound}) ::
    class Sink extends this ::
    Sink.prototype._protocol = inbound
    return Sink

  bindDispatch(endpoint, on_message, on_error) ::
    const protocol = this._protocol
    return async pkt => ::
      const entry = protocol[pkt.type]
      if undefined === entry ::
        return on_error @ false, @: endpoint, pkt

      const msg = await entry.recv @ pkt, this
      if ! msg :: return msg

      try ::
        return await on_message @ endpoint, msg, pkt
      catch err ::
        return on_error @ err, @: endpoint, msg, pkt

  _createStateMap() :: return new Map()
  byUniqId = this._createStateMap()
  entryFor(uid, ifAbsent) ::
    let entry = this.byUniqId.get(uid)
    if undefined === entry ::
      if 'function' === typeof ifAbsent ::
        entry = ifAbsent(uid, this)
      else entry = ifAbsent
      this.byUniqId.set @ uid, entry
    return entry

