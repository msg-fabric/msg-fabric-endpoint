export default class Sink ::
  static forProtocols({inbound}) ::
    class Sink extends this ::
    Sink.prototype._protocol = inbound
    return Sink

  static register(endpoint, kw_args) ::
    return new this().register(endpoint, kw_args)
  register(endpoint, {hub, id_target, on_message, on_error}) ::
    hub.router.registerTarget @ id_target,
      this.bindDispatch @ endpoint, on_message, on_error
    return this

  bindDispatch(endpoint, on_message, on_error) ::
    const protocol = this._protocol
    this.by_msgid = endpoint.bindStateMap()
    this.by_token = endpoint.bindReplyMap()
    return async pkt => ::
      const recv_msg = protocol[pkt.type]
      if undefined === recv_msg ::
        return on_error @ false, @: endpoint, pkt

      const msg = await recv_msg @ pkt, this
      if ! msg :: return msg

      try ::
        return await on_message @ endpoint, msg, pkt
      catch err ::
        return on_error @ err, @: endpoint, msg, pkt

  stateFor(msgid, ifAbsent) ::
    let entry = this.by_msgid.get(msgid)
    if undefined === entry ::
      if 'function' === typeof ifAbsent ::
        entry = ifAbsent(msgid, this)
      else entry = ifAbsent
      this.by_msgid.set @ msgid, entry
    return entry

  replyFor(token) ::
    return this.by_token.get(token)
