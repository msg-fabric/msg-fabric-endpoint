export default class Sink ::
  static forProtocols({inbound}) ::
    class Sink extends this ::
    Sink.prototype._protocol = inbound
    return Sink

  bindDispatch(endpoint, on_message) ::
    const protocol = this._protocol
    return async msg_part => ::
      const entry = protocol[msg_part.type]
      if undefined === entry ::
        return on_message @ null, msg_part

      const msg_full = await entry.recv @ msg_part, this
      if ! msg_full :: return msg_full
      return on_message @ endpoint, msg_full, msg_part

  _createStateMap() :: return new Map()
  byUniqId = this._createStateMap()
  entryFor(uid, ifAbsent) ::
    let entry = this.byUniqId.get(uid)
    if undefined === entry ::
      if 'function' === typeof ifAbsent ::
        entry = ifAbsent(uid, this)
      else entry = ifAbsent
      this.byUniqId.set @ uid, entry
    return entry

