const deliver = @{} 'direct': true, 'datagram': true, 'split_direct': true, 'split_datagram': true

export default sink
export function sink(_recv_, ep, hub, tgt, fallback) ::
  const on_msg = tgt.on_msg
    ? tgt.on_msg.bind(tgt)
    : 'function' === typeof tgt ? tgt
    : fallback.on_msg.bind(tgt)

  if 'function' !== typeof on_msg ::
    throw new TypeError @ 'Expected target or target.on_msg function'

  const on_ctrl_msg = tgt.on_ctrl_msg
    ? tgt.on_ctrl_msg.bind(tgt)
    : fallback.on_ctrl_msg.bind(tgt)

  let alive = true

  const isAlive = () => alive
  const shutdown = (err, extra) => ::
    if alive ::
      alive = false
      const tgt_ = tgt.on_shutdown ? tgt : fallback
      tgt_.on_shutdown(ep, err, extra)

  Object.assign @ ep, @{} isAlive, shutdown
  const by_msgid = ep.createStateMap ? ep.createStateMap() : new Map()

  const ep_msg_proto = @{} __proto__: null
    get msg() :: return ep.msg_reviver(this.pkt)
    get reply() :: return this.pkt.op.reply()
    get anon() :: return this.pkt.op.anon()
    ep, hub

  return dispatch_pkt


  async function dispatch_pkt(pkt, pktctx) ::
    if ! alive :: return
    pkt = _recv_(pkt)
    if null == pkt :: return // handled by _recv

    try ::
      const op = pkt.op
      if pkt.is_pkt_json ::
        const {msgid, kind} = op
        if msgid && null == op.resolve(ep.msg_reviver(pkt)) ::
          return // handled by op.resolve

        if 'ctrl' === kind ::
          return on_ctrl_msg @: pkt, __proto__: ep_msg_proto

        if pkt.is_multi_pkt ::
          return on_msg @: pkt, __proto__: ep_msg_proto

        if true === deliver[kind] ::
          return on_msg @: pkt, __proto__: ep_msg_proto

      return dispatch_msg(pkt, op)

    catch err ::
      try ::
        var terminate = (tgt.on_error ? tgt : fallback)
          .on_error @ ep, err, @{} pkt
      finally ::
        if false !== terminate ::
          pktctx.tgt_router.unregisterTarget(pkt.id_target)
          shutdown(err, {pkt})


  async function dispatch_msg(pkt, op) ::
    const {msgid, token} = op
    const key = msgid || token

    let on_tip_pkt = by_msgid.get(key)
    if undefined === on_tip_pkt ::
      // e.g. recv_stream, recv_multipart,
      const ep_recv = ep[`recv_${pkt.pkt_kind}`]
      if undefined !== ep_recv ::
        on_tip_pkt = await ep_recv.call(ep, pkt, op)

      if null == on_tip_pkt ::
        on_tip_pkt = noop
        ; (tgt.on_warn ? tgt : fallback)
          .on_warn @ ep, `Unhandled "${pkt.pkt_kind}" packet`, @{} pkt, op

      by_msgid.set(key, on_tip_pkt)

    var ep_msg = await on_tip_pkt(pkt, op, ep)
    if undefined !== ep_msg ::
      if msgid && null == op.resolve(ep_msg) ::
        return // handled by op.resolve
      await on_msg(ep_msg)

function noop() ::
