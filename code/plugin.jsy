import init_protocol from './protocol/index.jsy'
import EPTarget from './ep_target.jsy'
import SinkBase from './sink.jsy'
import MsgCtxBase from './msgctx.jsy'
import EndpointBase from './endpoint.jsy'

const default_plugin_options = @:
  plugin_name: 'endpoint'
  on_msg({msg, reply, info}) ::
    console.warn @ 'ENDPOINT MSG:', @{} msg, reply, info
  on_error(ep, err, extra) ::
    console.error @ 'ENDPOINT ERROR:', err
    // const {msg, pkt} = extra
    // return false to prevent auto-shutdown
  on_shutdown(ep, err, extra) ::
    // const {msg, pkt} = extra
    console.error @ `ENDPOINT SHUTDOWN: ${err.message}`

  subclass(classes) ::
    //const {Endpoint, Sink, MsgCtx, protocols} = classes
    return classes

  json_pack: JSON.stringify
  createMap() :: return new Map() // LRUMap, HashbeltMap


export default function(plugin_options) ::
  plugin_options = Object.assign @ {}, default_plugin_options, plugin_options
  const @{}
    plugin_name, random_id, json_pack
    on_msg: default_on_msg
    on_error: default_on_error
    on_shutdown: default_on_shutdown
    createMap
  = plugin_options

  return @: order: 1, subclass, post
  
  function subclass(FabricHub_PI, bases) ::
    const {packetParser} = FabricHub_PI.prototype
    if null==packetParser || ! packetParser.isPacketParser() ::
      throw new TypeError @ `Invalid packetParser for plugin`
    
    FabricHub_PI.prototype[plugin_name] =
      bindEndpointApi @ packetParser

  function post(hub) ::
    return hub[plugin_name] = hub[plugin_name](hub)

  function bindEndpointApi(packetParser) ::
    const protocols = init_protocol @ packetParser, @{} random_id, json_pack

    const {Endpoint, Sink, MsgCtx: MsgCtx_pi} =
      plugin_options.subclass @:
        protocols,
        Sink: SinkBase.forProtocols(protocols)
        MsgCtx: MsgCtxBase.forProtocols(protocols)
        Endpoint: EndpointBase.subclass({createMap})

    return function(hub) ::
      const channel = hub.connect_self()
      const MsgCtx = MsgCtx_pi.forHub(hub, channel)
      return Object.assign @ endpoint, @: create, server: endpoint, client, clientEndpoint


      function endpoint(on_init) ::
        const targets = hub.router.targets
        do var id_target = random_id()
        while targets.has @ id_target
        return create @ id_target, on_init

      function create(id_target, on_init) ::
        const handlers = Object.create(null)
        const id = @{} id_target, id_router: hub.router.id_self
        const msg_ctx = new MsgCtx @ id
        const ep = new Endpoint @ id, msg_ctx

        const ready = Promise
          .resolve @ on_init(ep, hub)
          .then @ _after_init

        // Allow for both internal and external error handling by forking ready.catch
        ready.catch @ err => handlers.on_error @ err, @{} zone:'on_ready'

        ::
          const ep_tgt = new EPTarget(id)
          return Object.defineProperties @ ep_tgt, @{}
            ready: @{} value: ready.then @ () => ep_tgt


        function _after_init(target) ::
          if null == target ::
            throw new TypeError @ `Expected endpoint init to return a closure or interface`

          handlers.on_msg = (target.on_msg || ('function' === typeof target ? target : default_on_msg)).bind(target)
          handlers.on_error = (target.on_error || default_on_error).bind(target, ep)
          handlers.on_shutdown = (target.on_shutdown || default_on_shutdown).bind(target, ep)

          new Sink().register @ ep, hub, id_target, handlers

          return target.on_ready ? target.on_ready(ep, hub) : target



      function clientEndpoint(on_ready) ::
        return new Promise @ (resolve, reject) =>
          endpoint @ ep => @:
            async on_ready(ep, hub) ::
              resolve @ await on_ready(ep, hub)
              ep.shutdown()
            on_send_error(ep, err) :: reject(err)
            on_shutdown(ep, err) :: err ? reject(err) : resolve()


      function client(...args) ::
        if 1 === args.length && 'function' === typeof args[0] ::
          return clientEndpoint(args[0])

        const msg_ctx = new MsgCtx @ null
        return 0 !== args.length ? msg_ctx.to(...args) : msg_ctx

