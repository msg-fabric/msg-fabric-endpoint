export default class MsgCtxBase ::
  constructor(endpoint, resolveRoute) ::
    const {from_id} = endpoint
    const ctx = undefined !== from_id ? {from_id} : {}
    Object.defineProperties @ this, @:
      ctx: @: value: ctx
      resolveRoute: @: value: resolveRoute
      endpoint: @: value: endpoint

  static from(endpoint, resolveRoute) ::
    return new this @ endpoint, resolveRoute


  ping() :: return this.codec('control', {token: true}).invoke @ 'ping'
  send(...args) :: return this.invoke @ 'send', ...args
  stream(...args) :: return this.invoke @ 'stream', ...args

  invoke(key, ...args) ::
    const obj = Object.assign @ {}, this.ctx
    const chan = this.resolveRoute(obj.id_router)
    if true !== obj.token ::
      return this._codec[key] @ chan, obj, ...args

    const token = obj.token = this.random_id()
    const reply = this.endpoint.initReply(token, this, key)
    return reply @ this._codec[key] @ chan, obj, ...args


  with(...args) ::
    const ctx = this.ctx
    for let tgt of args ::
      if 'number' === typeof tgt ::
        ctx.id_target = tgt
        ctx.id_router = ctx.from_id.id_router
        continue

      const {from_id: reply_id, id_target, id_router, token, msgid} = tgt

      if undefined !== id_target ::
        if undefined === id_router ::
          if ! ctx.id_router ::
            // implicitly on the same router
            ctx.id_router = ctx.from_id.id_router
        else ctx.id_router = id_router
        ctx.id_target = id_target
      else if undefined !== id_router ::
        throw new Error @ `Passing 'id_router' requires 'id_target'`
      else if undefined !== reply_id && ! ctx.id_target ::
        ctx.id_router = reply_id.id_router
        ctx.id_target = reply_id.id_target

      if undefined !== token :: ctx.token = token
      if undefined !== msgid :: ctx.msgid = msgid

    return this

  withReply() ::
    return this.clone @: token: true

  clone(...args) ::
    return Object.create @ this, @:
      ctx: @: value: Object.assign @ {}, this.ctx, ...args


  codec(msg_codec, ...args) ::
    if 'string' === typeof msg_codec ::
      msg_codec = this._msgCodecs[msg_codec]

    if 'function' !== typeof msg_codec.send ::
      throw new TypeError @ `Expected packet codec protocol`

    return Object.create @ this, @:
      _codec: @: value: msg_codec
      ctx: @: value: Object.assign @ {}, this.ctx, ...args

  static withCodecs(msgCodecs) ::
    for const [name, msg_codec] of Object.entries @ msgCodecs ::
      this.prototype[name] = function() ::
        return this.codec @ msg_codec
    this.prototype._msgCodecs = msgCodecs
    this.prototype._codec = msgCodecs.default
    return this

Object.assign @ MsgCtxBase.prototype, @{}
  ms_timeout: 5000

