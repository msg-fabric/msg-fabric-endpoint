export default function binary_protocol(shared) ::
  const {createMultipart, packetParser} = shared
  const {asBuffer, packPacketObj} = packetParser

  return @{}
    get datagram() :: return this.direct
    direct: @{}
      t_send(chan, obj) ::
        const pkt = packPacketObj(obj)
        return chan @ pkt
      t_recv(pkt, sink) ::
        const body = pkt.body_buffer()
        return @: body, info: pkt.info

    multipart: @{}
      t_send(chan, obj) ::
        throw new Error @ 'TODO: split into packetsâ€¦'
      t_recv(pkt, sink) ::
        const feed = sink.stateFor @ pkt.msgid, createMultipart
        let body = feed(pkt)
        if undefined !== body ::
          return @: body, info: feed.info

    streaming: @{}
      t_send() :: throw new Error @ 'TODO'
      t_recv(pkt, sink) ::
        const feed = sink.stateFor @ pkt.msgid, createStreaming
        let body = feed(pkt)
        if undefined !== body ::
          return @: body, info: feed.info

