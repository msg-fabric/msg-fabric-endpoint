export default function binary_protocol(shared) ::
  const {createMultipart, createStream} = shared
  const {pack_utf8, unpack_utf8} = shared.packetParser
  const {asBuffer} = shared.packetParser
  return @{}
    packBody: asBuffer
    packStream(chunk, fragment_size) ::
      return @[] asBuffer(chunk)

    get datagram() :: return this.direct
    direct: @{}
      t_recv(pkt, sink) ::
        const msg = pkt.body_buffer()
        return sink.recvMsg @ msg, pkt.info

    multipart: @{}
      t_recv(pkt, sink) ::
        const feed = sink.stateFor @ pkt.info.msgid, createMultipart
        const msg = feed(pkt)
        if undefined !== msg ::
          return sink.recvMsg @ msg, feed.info

    streaming: @{}
      mode: 'bytes'
      t_recv(pkt, sink) ::
        const feed = sink.stateFor @ pkt.info.msgid, createStream
        const msg = feed(pkt)
        if undefined !== msg ::
          return sink.recvMsg @ msg, feed.info

