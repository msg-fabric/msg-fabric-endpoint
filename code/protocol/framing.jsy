const little_endian = true
const c_single = 'single'
const c_datagram = 'datagram'
const c_direct = 'direct'
const c_multipart = 'multipart'
const c_streaming = 'streaming'

const _err_token_required = `Transport reqires 'token'`

function pack_routing(obj, dv, offset) ::
  dv.setInt32 @ 0+offset, 0|obj.id_router, little_endian
  dv.setInt32 @ 4+offset, 0|obj.id_target, little_endian

function unpack_routing(obj, dv, offset) ::
  obj.id_router = dv.getInt32 @ 0+offset, little_endian
  obj.id_target = dv.getInt32 @ 4+offset, little_endian


export const basic_framings = @:
  from_routing: @:
    size: 8, bits: 0x1, mask: 0x1
    f_test(obj) :: return null != obj.from_id

    f_pack(obj, dv, offset) ::
      pack_routing(obj.from_id, dv, offset)

    f_unpack(obj, dv, offset) ::
      if undefined === obj.from_id ::
        obj.from_id = {}
      unpack_routing(obj.from_id, dv, offset)

  response: @:
    size: 4, bits: 0x2, mask: 0x2
    f_test(obj) :: return null != obj.msgid

    f_pack(obj, dv, offset) ::
      dv.setInt32 @ 0+offset, obj.msgid, little_endian

    f_unpack(obj, dv, offset) ::
      const token = dv.getInt32 @ 0+offset, little_endian
      obj.token = token

  datagram: @:
    size: 0, bits: 0x0, mask: 0xc
    transport: c_datagram
    f_test(obj) ::
      if c_datagram === obj.transport :: return true
      if obj.transport && c_single !== obj.transport :: return false
      return ! obj.token
    f_pack(obj, dv, offset) ::
    f_unpack(obj, dv, offset) ::
      obj.transport = c_datagram

  direct: @:
    size: 4, bits: 0x4, mask: 0xc
    transport: c_direct
    f_test(obj) ::
      if c_direct === obj.transport :: return true
      if obj.transport && c_single !== obj.transport :: return false
      return !! obj.token
    f_pack(obj, dv, offset) ::
      if ! obj.token :: throw new Error @ _err_token_required
      dv.setInt32 @ 0+offset, obj.token, little_endian
    f_unpack(obj, dv, offset) ::
      obj.msgid = dv.getInt32 @ 0+offset, little_endian
      obj.transport = c_direct

  multipart: @:
    size: 6, bits: 0x8, mask: 0xc
    transport: c_multipart
    f_test(obj) ::
      return c_multipart === obj.transport

    f_pack(obj, dv, offset) ::
      if ! obj.token :: throw new Error @ _err_token_required
      dv.setInt32 @ 0+offset, obj.token, little_endian
      dv.setInt8  @ 4+offset, obj.seq || -1
      dv.setUint8 @ 5+offset, obj.mp_flags || 0

    f_unpack(obj, dv, offset) ::
      obj.msgid     = dv.getInt32 @ 0+offset, little_endian
      obj.seq       = dv.getInt8  @ 4+offset
      obj.mp_flags  = dv.getUint8 @ 5+offset
      obj.transport = c_multipart

  streaming: @:
    size: 8, bits: 0xc, mask: 0xc
    transport: c_streaming
    f_test(obj) ::
      return c_streaming === obj.transport

    f_pack(obj, dv, offset) ::
      if ! obj.token :: throw new Error @ _err_token_required
      dv.setInt32 @ 0+offset, obj.token, little_endian
      dv.setInt32 @ 4+offset, obj.seq || -1

    f_unpack(obj, dv, offset) ::
      obj.msgid = dv.getInt32 @ 0+offset, little_endian
      obj.seq   = dv.getInt32 @ 4+offset, little_endian
      obj.transport = c_streaming

  trailer: @:
    size: null, bits: 0, mask: 0
    len: trailer_len
    f_pack(obj, dv, offset) ::
      let trailer = obj.trailer
      if null == trailer :: return
      if ! ArrayBuffer.isView(trailer) ::
        trailer = new Uint8Array(trailer)
      new Uint8Array(dv.buffer).set @ trailer, offset
    f_unpack(obj, dv, offset) ::
      if dv.byteLength > offset ::
        obj.trailer = dv.buffer.slice(offset)


function trailer_len(obj, cacheTrailer) ::
  let trailer = obj.trailer
  if null == trailer :: return 0
  if ! ArrayBuffer.isView(trailer) ::
    trailer = new Uint8Array(trailer)
  if cacheTrailer :: obj.trailer = trailer
  return trailer.byteLength

export const framings = composeFramings()
export default framings

function composeFramings() ::
  for const [name, f] of Object.entries(basic_framings) ::
    const {size, bits} = f, info = {size, bits}
    if 'production' !== process.env.NODE_ENV ::
      const op = `${name}[${f.size}]`
      f.op = info.op = op
      if f.f_pack ::
        Object.assign @ f.f_pack, info
        Object.defineProperty @ f.f_pack, 'name', @{} value: `f_pack «${op}»`
      if f.f_unpack ::
        Object.assign @ f.f_unpack, info
        Object.defineProperty @ f.f_unpack, 'name', @{} value: `f_unpack «${op}»`
      if f.f_test ::
        Object.assign @ f.f_test, info
        Object.defineProperty @ f.f_test, 'name', @{} value: `f_test «${op}»`
    else ::
      if f.f_pack :: f.f_pack.size = size
      if f.f_unpack :: f.f_unpack.size = size
      if f.f_test :: f.f_test.bits = bits

  const byBits = []
  for let bits=0; bits <= 0xf; bits++ ::
    const cfn = compose @ bits
    byBits[bits] = cfn

  const framingTests = Object.values(basic_framings).map(f=>f.f_test).filter(f=>f)
  function testBits(obj) ::
    let i = 0
    for const f_test of framingTests ::
      if f_test(obj) :: i |= f_test.bits
    return i

  byBits.testBits = testBits
  byBits.choose = function (obj, lst) ::
    const i = testBits(obj)
    if null == lst :: lst = this || byBits
    return lst[i]

  return byBits

  function fold(r, f, ...args) ::
    const offset = 0|r.size
    fpk2.size = r.size + (0|f.size)
    if 'production' !== process.env.NODE_ENV ::
      fpk2.op = `${r.op}-${f.op}@${offset}`
    return fpk2

    function fpk2(obj, dv) ::
      r(obj, dv, 0)
      f(obj, dv, offset)

  function compose(bits) ::
    const parts = Object.values(basic_framings)
      .filter @ f => f.bits === (bits & f.mask)

    const pack_frames = parts.map(f=>f.f_pack).reduce(fold)
    const unpack_frames = parts.map(f=>f.f_unpack).reduce(fold)
    const {transport} = parts.find(f=>f.transport)
    const {size, op} = pack_frames

    if 'production' !== process.env.NODE_ENV ::
      Object.defineProperty @ pack, 'name', @{} value: `pack «${op}»`
      Object.defineProperty @ pack_frames, 'name', @{} value: `pack_frames «${op}»`
      Object.defineProperty @ unpack, 'name', @{} value: `unpack «${op}»`
      Object.defineProperty @ unpack_frames, 'name', @{} value: `unpack_frames «${op}»`

    return @:
      bits, mask:0xf, size, op
      transport, parts
      pack, unpack

    function pack(pkt_type, pkt_obj, packTrailer) ::
      if ! @ 0 <= pkt_type && pkt_type <= 255 ::
        throw new TypeError @ `Expected pkt_type to be [0..255]`

      if undefined !== pkt_obj.trailer ::
        pkt_obj.trailer = packTrailer(pkt_obj)
      const len = size + trailer_len(pkt_obj, true)
      const dv = new DataView @ new ArrayBuffer(len)
      pack_frames(pkt_obj, dv)
      pkt_obj.type = pkt_type
      return pkt_obj.header = dv.buffer

    function unpack(pkt, unpackTrailer) ::
      const buf = pkt.header_buffer()
      const dv = new DataView @ new Uint8Array(buf).buffer

      const info = {}
      unpack_frames(info, dv)
      if undefined !== info.trailer && undefined !== unpackTrailer ::
        unpackTrailer(info)

      return pkt.info = info
