import {o_create, o_assign} from './_utils'
import ep_proto from './ep_proto.jsy'

ep_proto._add_kind_ @:
  client(on_client) ::
    const client = as_client_target(on_client)
    this.endpoint(client)
    return client.done

  client_api(on_client, api) ::
    // get api_parallel as closure instead of an endpoint instance
    const ep_api = this._as_target_().api_parallel(api)
    const client = as_client_target(on_client)
    this.endpoint @ (ep, hub) =>
      o_assign @ client, ep_api(ep, hub)
    return client.done


export function as_client_target(on_client) ::
  let client
  const done = new Promise @ (resolve, reject) => ::
    client = @{}
      on_ready(ep, hub) ::
        done.then(ep.shutdown, ep.shutdown)
        resolve @ on_client(ep, hub)
      on_shutdown(ep, err) ::
        err ? reject(err) : resolve()

  client.done = done
  return client
  
