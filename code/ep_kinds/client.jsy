import { o_create, o_assign } from '../_utils'
import ep_proto from './ep_proto.jsy'

ep_proto._add_kind_ @:
  clientOf(...args) ::
    const on_client = args.pop()
    const tgt = args.shift()
    return this.client @ async (ep, hub) =>
      on_client @ ep.api_to(tgt, ...args), ep, hub

  client(on_client) ::
    const client = as_client_target(on_client)
    this.endpoint(client)
    return client.done

  client_api(on_client, api) ::
    // get api_parallel as closure instead of an endpoint instance
    const ep_api = this._as_target_().api_parallel(api)
    const client = as_client_target(on_client)
    this.endpoint @ (ep, hub) =>
      o_assign @ client, ep_api(ep, hub)
    return client.done


export function as_client_target(on_client) ::
  let client
  const done = new Promise @ (resolve, reject) => ::
    client = @{}
      on_msg(m) ::
        console.warn @ 'CLIENT ENDPOINT MSG:', m
        //if pkt.is_pkt_json :: console.dir @ pkt.json(), @{} colors: true
      on_ready(ep, hub) ::
        done.then(ep.shutdown, ep.shutdown)
        resolve @ on_client(ep, hub)
      on_shutdown(ep, err) ::
        err ? reject(err) : resolve()

  client.done = done
  return client


ep_proto._add_extension_ @ (pi_endpoint, hub) => ::
  const op_prefix = 'rpc_'
  const invoke_proxy = @{}
    has: () => true
    get: (invoke, prop) =>
      prop.startsWith(invoke._pfx_)
        ? kw => invoke @ prop, kw
        : invoke[prop]

  o_assign @ pi_endpoint.ep_mixin_api, @{}
    api_to(tgt, ctx, pfx) ::
      invoke._pfx_ = pfx || op_prefix
      tgt = this.to(tgt)
      return new Proxy @ invoke, invoke_proxy

      function invoke(op, kw) ::
        return tgt.query @: op, kw, ctx

