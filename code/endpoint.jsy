import {ep_encode} from './ep_target.jsy'

export default class Endpoint ::
  static subclass(extensions) ::
    class Endpoint extends this ::
    Object.assign @ Endpoint.prototype, extensions
    return Endpoint

  valueOf() :: return this.from_id
  inspect() :: return `«Endpoint ${ep_encode(this.from_id, true)}»`

  constructor(msg_ctx, ep_tgt) ::
    msg_ctx = msg_ctx.withEndpoint(this)
    const asReply = ep_tgt.constructor.json_as_reply(msg_ctx)
    Object.defineProperties @ this, @:
      from_id: @{} value: msg_ctx.from_id, enumerable: true
      toJSON: @{} value() :: return ep_tgt.toJSON()
      to: @{} value: msg_ctx.to
      asReply: @{} value: asReply

  createMap() :: return new Map()
  createStateMap() :: return this.createMap()
  createReplyMap() :: return this.createMap()
  createTrafficMap() :: return this.createMap()

  bindSink(sink) ::
    const by_token = this.createReplyMap()
    const by_traffic = this.createTrafficMap()
    Object.defineProperties @ this, @:
      by_token: @{} value: by_token
      by_traffic: @{} value: by_traffic

    const traffic = (from_id, traffic) => ::
      const ts = Date.now()
      if from_id ::
        const t = by_traffic.get(from_id.id_target)
        if undefined !== t ::
          t.ts = t[`ts_${traffic}`] = ts
      this.recvTraffic(from_id, traffic, ts)

    return @{}
      from_id: this.from_id
      by_msgid: this.createStateMap()

      recvCtrl: (msg, info) => ::
        traffic(info.from_id, 'ctrl')
        const reply = by_token.get(info.token)
        const rmsg = this.recvCtrl(msg, info, reply)

        if undefined !== reply ::
          Promise.resolve(rmsg || {msg, info}).then(reply)
        else return rmsg

      recvMsg: (msg, info) => ::
        traffic(info.from_id, 'msg')
        const reply = by_token.get(info.token)
        const rmsg = this.recvMsg(msg, info, reply)

        if undefined !== reply ::
          Promise.resolve(rmsg).then(reply)
        else return rmsg

      recvStreamData: (rstream, info) => ::
        traffic(info.from_id, 'stream')
      recvStream: (msg, info) => ::
        traffic(info.from_id, 'stream')
        const reply = by_token.get(info.token)
        const rstream = this.recvStream(msg, info, reply)

        if undefined !== reply ::
          Promise.resolve(rstream).then(reply)
        return rstream

  recvTraffic(from_id, traffic, ts) ::
  recvCtrl(msg, info, is_reply) ::
    if is_reply :: return msg
  recvMsg(msg, info, is_reply) ::
    if is_reply :: return msg
    return @{} msg, info, reply: this.asReply(info)
  recvStream(msg, info, is_reply) ::
    console.warn @ `Unhandle recv stream: ${info}`
    return null
    /* return @{} msg, info
         on_init(msg, pkt) :: return this
         on_data(data, pkt) :: this.parts.push @ data
         on_end(result, pkt) :: return this.parts.join('')
         on_error(err, pkt) :: console.log @ err
    */

  initReply(token, msg_ctx) ::
    return this.initReplyPromise @ token, msg_ctx.ms_timeout

  initMonitor(id_target) ::
    const key = id_target.id_target || id_target
    let monitor = this.by_traffic.get @ key
    if undefined === monitor ::
      monitor = @{} id_target, ts: Date.now()
        td() :: return Date.now() - this.ts
      this.by_traffic.set @ key, monitor
    return monitor

  initReplyPromise(token, ms_timeout) ::
    let reject
    const ans = new Promise @ (resolve, reject_) => ::
      this.by_token.set @ token, resolve
      reject = reject_

    if ms_timeout ::
      const timeout = () => reject @ new this.ReplyTimeout
      const tid = setTimeout(timeout, ms_timeout)
      if tid.unref :: tid.unref()
      function clear() :: clearTimeout(tid)
      ans.then @ clear, clear

    return res => ::
      if res && res.catch ::
        ans.sent = res
        res.catch(reject)
      return ans


class ReplyTimeout extends Error ::

Object.assign @ Endpoint.prototype, @{}
  ReplyTimeout

